import time

import pygame as pg

from main import *
from src.settings_class import Settings


class Screens:
    """
    Class stores methods that create the appropriate screens
    """

    @staticmethod
    def initialize_window(caption: str) -> tuple[pg.Surface, pg.image, pg.image]:
        """
        Method is responsible for reading the basic parameters of the window
        :param caption:
        :return: tuple[Surface, image, image]
        """
        window = pg.display.set_mode((Settings.window_width, Settings.window_height),
                                     pg.SCALED | pg.FULLSCREEN)
        pg.display.set_caption(caption)
        background = pg.image.load('assets/background/background.jpeg').convert_alpha()
        icon = pg.image.load('assets/icon/icon.png').convert_alpha()
        pg.display.set_icon(icon)
        return window, background, icon

    @staticmethod
    def start() -> None:
        """
        Method creates a start screen that we see after starting the game
        :return: None
        """
        window, background, icon = Screens.initialize_window('Space Invaders')
        pg.display.set_icon(icon)
        font = pg.font.Font(None, 50)
        text1 = font.render('Start Screen', True, (255, 255, 255))
        text2 = font.render('Press space to play', True, (255, 255, 255))

        # Triggering an animation of the transition between screens
        Screens.loading()

        # Method waits for an event generated by the player
        while True:
            keys = pg.key.get_pressed()
            window.blit(background, (0, 0))
            window.blit(text1, (50, 350))
            window.blit(text2, (50, 400))
            pg.display.update()

            for event in pg.event.get():
                if event.type == pg.QUIT:
                    pg.quit()
                    sys.exit()
                if keys[pg.K_SPACE]:
                    Screens.loading()
                    main()
                if event.type == pg.MOUSEBUTTONDOWN:
                    Screens.loading()
                    main()
                if event.type == pg.KEYDOWN:
                    if event.key == pg.K_ESCAPE:
                        pg.quit()
                        sys.exit()

    @staticmethod
    def end() -> None:
        """
        Method displays the final screeny
        :return: None
        """
        window, background, icon = Screens.initialize_window('Space Invaders')
        pg.display.set_icon(icon)
        font = pg.font.Font(None, 50)
        text1 = font.render('You win', True, (255, 255, 255))

        Screens.loading()

        while True:
            window.blit(background, (0, 0))
            window.blit(text1, (200, 350))
            pg.display.update()

            for event in pg.event.get():
                if event.type == pg.QUIT:
                    pg.quit()
                    sys.exit()
                if event.type == pg.MOUSEBUTTONDOWN:
                    pg.quit()
                    sys.exit()
                if event.type == pg.KEYDOWN:
                    if event.key == pg.K_ESCAPE:
                        pg.quit()
                        sys.exit()

    @staticmethod
    def defeat() -> None:
        """
        Method opens a window when you lose the game
        :return: None
        """
        window, background, icon = Screens.initialize_window('Space Invaders')
        pg.display.set_icon(icon)
        font = pg.font.Font(None, 50)
        text1 = font.render('You lose', True, (255, 255, 255))

        Screens.loading()

        while True:
            window.blit(background, (0, 0))
            window.blit(text1, (200, 350))
            pg.display.update()

            for event in pg.event.get():
                if event.type == pg.QUIT:
                    pg.quit()
                    sys.exit()
                if event.type == pg.MOUSEBUTTONDOWN:
                    pg.quit()
                    sys.exit()
                if event.type == pg.KEYDOWN:
                    if event.key == pg.K_ESCAPE:
                        pg.quit()
                        sys.exit()

    @staticmethod
    def loading() -> None:
        """
        Method is responsible for generating an animation of the transition between levels
        :return:
        """
        loading_image = [pg.image.load(f'assets/loadingScreen/image{x}.png').convert_alpha() for x in range(0, 5)]
        window = pg.display.set_mode((Settings.window_width, Settings.window_height),
                                     pg.SCALED | pg.FULLSCREEN)
        counter = 0

        while True:
            window.blit(loading_image[counter], (0, 0))
            counter += 1
            pg.display.update()
            time.sleep(.05)

            if counter > 4:
                break
