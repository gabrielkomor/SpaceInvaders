import pygame
import sys
import time
from scripts.settingsClass import Settings
from main import *


# Class stores methods that create the appropriate screens
class Screens:
    # Method is responsible for reading the basic parameters of the window
    @staticmethod
    def initialize_window(caption: str) -> tuple[pygame.Surface, pygame.image, pygame.image]:
        window = pygame.display.set_mode((Settings.window_width, Settings.window_height),
                                         pygame.SCALED | pygame.FULLSCREEN)
        pygame.display.set_caption(caption)
        background = pygame.image.load('background/background.jpeg').convert_alpha()
        icon = pygame.image.load('icon/icon.png').convert_alpha()
        pygame.display.set_icon(icon)
        return window, background, icon

    # Method creates a start screen that we see after starting the game
    @staticmethod
    def start() -> None:
        window, background, icon = Screens.initialize_window('Space Invaders')
        pygame.display.set_icon(icon)
        font = pygame.font.Font(None, 50)
        text1 = font.render('Start Screen', True, (255, 255, 255))
        text2 = font.render('Press space to play', True, (255, 255, 255))

        # Triggering an animation of the transition between screens
        Screens.loading()

        # Method waits for an event generated by the player
        while True:
            keys = pygame.key.get_pressed()
            window.blit(background, (0, 0))
            window.blit(text1, (50, 350))
            window.blit(text2, (50, 400))
            pygame.display.update()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                if keys[pygame.K_SPACE]:
                    Screens.loading()
                    main()
                if event.type == pygame.MOUSEBUTTONDOWN:
                    Screens.loading()
                    main()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        pygame.quit()
                        sys.exit()

    # Method displays the final screeny
    @staticmethod
    def end() -> None:
        window, background, icon = Screens.initialize_window('Space Invaders')
        pygame.display.set_icon(icon)
        font = pygame.font.Font(None, 50)
        text1 = font.render('You win', True, (255, 255, 255))

        Screens.loading()

        while True:
            window.blit(background, (0, 0))
            window.blit(text1, (200, 350))
            pygame.display.update()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.MOUSEBUTTONDOWN:
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        pygame.quit()
                        sys.exit()

    # Method opens a window when you lose the game
    @staticmethod
    def defeat() -> None:
        window, background, icon = Screens.initialize_window('Space Invaders')
        pygame.display.set_icon(icon)
        font = pygame.font.Font(None, 50)
        text1 = font.render('You lose', True, (255, 255, 255))

        Screens.loading()

        while True:
            window.blit(background, (0, 0))
            window.blit(text1, (200, 350))
            pygame.display.update()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.MOUSEBUTTONDOWN:
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        pygame.quit()
                        sys.exit()

    # Method is responsible for generating an animation of the transition between levels
    @staticmethod
    def loading() -> None:
        loading_image = [pygame.image.load(f'loadingScreen/image{x}.png').convert_alpha() for x in range(0, 5)]
        window = pygame.display.set_mode((Settings.window_width, Settings.window_height),
                                         pygame.SCALED | pygame.FULLSCREEN)
        counter = 0

        while True:
            window.blit(loading_image[counter], (0, 0))
            counter += 1
            pygame.display.update()
            time.sleep(.05)

            if counter > 4:
                break
